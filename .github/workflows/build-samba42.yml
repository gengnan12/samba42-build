name: Build Samba 4 for ARMv7 (Legacy GLIBC - Fixed Dependencies)

on:
  workflow_dispatch:

jobs:
  build-samba:
    runs-on: ubuntu-20.04  # 使用Ubuntu 20.04以获得更好的多架构支持
    timeout-minutes: 180
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ubuntu 20.04 environment
        run: |
          echo "===== 设置Ubuntu 20.04环境 ====="
          sudo sed -i 's/^deb http/deb [arch=amd64] http/' /etc/apt/sources.list
          
          # 添加ARM架构支持
          sudo dpkg --add-architecture armhf
          
          # 添加ARM源
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports focal main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/armhf.list
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports focal-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/armhf.list
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports focal-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/armhf.list
          
          sudo apt update

      - name: Install cross-compilation tools
        run: |
          echo "===== 安装交叉编译工具 ====="
          sudo apt install -y \
            build-essential \
            crossbuild-essential-armhf \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf \
            pkg-config \
            wget tar xz-utils make \
            python3 python3-dev

      - name: Install ARM libraries using apt-get
        run: |
          echo "===== 安装ARM架构库 ====="
          # 使用apt-get安装ARM库，避免:armhf后缀问题
          sudo apt-get install -y \
            libssl-dev:armhf \
            zlib1g-dev:armhf \
            libtasn1-6-dev:armhf \
            libnettle-dev:armhf

      - name: Alternative method if above fails
        if: failure()
        run: |
          echo "===== 使用备用方法安装依赖 ====="
          # 如果直接安装失败，尝试手动下载安装
          mkdir -p arm-packages
          cd arm-packages
          
          # 下载必要的ARM开发包
          wget http://ports.ubuntu.com/pool/main/o/openssl/libssl-dev_1.1.1f-1ubuntu2.19_armhf.deb
          wget http://ports.ubuntu.com/pool/main/z/zlib/zlib1g-dev_1.2.11.dfsg-2ubuntu1.5_armhf.deb
          wget http://ports.ubuntu.com/pool/main/libt/libtasn1-6/libtasn1-6-dev_4.16.0-2_armhf.deb
          wget http://ports.ubuntu.com/pool/main/n/nettle/libnettle-dev_3.6-2_armhf.deb
          
          # 安装下载的包
          sudo dpkg -i --force-all *.deb
          sudo apt-get install -f -y

      - name: Check ARM toolchain
        run: |
          echo "===== 检查ARM工具链 ====="
          arm-linux-gnueabihf-gcc --version
          arm-linux-gnueabihf-gcc -dumpmachine
          echo "工具链位置: $(which arm-linux-gnueabihf-gcc)"

      - name: Build minimal GnuTLS
        run: |
          echo "===== 编译最小化GnuTLS ====="
          # 使用较新的但兼容的GnuTLS版本
          GNUTLS_VERSION="3.7.0"
          wget -q --show-progress "https://www.gnupg.org/ftp/gcrypt/gnutls/v3.7/gnutls-${GNUTLS_VERSION}.tar.xz"
          tar -xJf gnutls-${GNUTLS_VERSION}.tar.xz
          cd gnutls-${GNUTLS_VERSION}

          ./configure \
            --host=arm-linux-gnueabihf \
            --prefix=/opt/arm-gnutls \
            --disable-doc \
            --disable-tests \
            --enable-shared \
            --without-p11-kit \
            --with-included-libtasn1 \
            --with-included-unistring \
            CFLAGS="-march=armv7-a -mfpu=neon -mfloat-abi=hard -Os" \
            LDFLAGS="-static-libgcc"

          make -j$(nproc)
          sudo make install

      - name: Download and compile Samba 4.9
        run: |
          echo "===== 下载和编译Samba 4.9 ====="
          SAMBA_VERSION="4.9.5"
          wget -q --show-progress "https://download.samba.org/pub/samba/stable/samba-${SAMBA_VERSION}.tar.gz"
          tar -xzf samba-${SAMBA_VERSION}.tar.gz
          cd samba-${SAMBA_VERSION}

          export PKG_CONFIG_PATH="/opt/arm-gnutls/lib/pkgconfig"
          export CC="arm-linux-gnueabihf-gcc"
          export CXX="arm-linux-gnueabihf-g++"
          export CFLAGS="-march=armv7-a -mfpu=neon -mfloat-abi=hard -Os"
          export LDFLAGS="-L/opt/arm-gnutls/lib -static-libgcc"

          ./configure \
            --host=arm-linux-gnueabihf \
            --prefix=/usr \
            --sysconfdir=/etc/samba \
            --localstatedir=/var \
            --disable-python \
            --without-ldap \
            --without-ad-dc \
            --without-systemd \
            --without-winbind \
            --with-gnutls=/opt/arm-gnutls \
            --enable-shared-libs=no

          make -j$(nproc) all

      - name: Verify binaries
        run: |
          echo "===== 验证二进制文件 ====="
          SAMBA_VERSION="4.9.5"
          cd samba-${SAMBA_VERSION}/bin
          
          # 检查文件类型
          file smbd
          file nmbd
          
          # 检查架构
          arm-linux-gnueabihf-readelf -h smbd | grep "Machine:" | grep "ARM" || exit 1
          
          # 检查动态库依赖
          echo "动态库依赖:"
          arm-linux-gnueabihf-readelf -d smbd | grep "Shared library" || echo "无动态库依赖"

      - name: Create deployment package
        run: |
          echo "===== 创建部署包 ====="
          SAMBA_VERSION="4.9.5"
          mkdir -p samba-deploy
          cd samba-${SAMBA_VERSION}
          
          # 复制二进制文件
          cp bin/smbd bin/nmbd bin/smbpasswd ../samba-deploy/
          
          # 创建安装脚本
          cat > ../samba-deploy/install.sh << 'EOF'
          #!/bin/sh
          echo "安装Samba ARMv7二进制文件..."
          cp smbd nmbd smbpasswd /usr/sbin/
          chmod 755 /usr/sbin/smbd /usr/sbin/nmbd /usr/sbin/smbpasswd
          echo "安装完成!"
          echo "运行: smbd -D 启动服务"
          EOF
          
          chmod +x ../samba-deploy/install.sh
          
          # 创建README
          cat > ../samba-deploy/README.txt << 'EOF'
          Samba 4.9.5 for ARMv7 (Linux 4.1.x)
          适用于: ARMv7架构，Linux 4.1.x内核
          包含: smbd, nmbd, smbpasswd
          安装: 运行 ./install.sh
          EOF

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: samba4.9-armv7-compatible
          path: samba-deploy/*
          retention-days: 30
