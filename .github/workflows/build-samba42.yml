name: Build Samba 4 for ARMv7 (Python 2 Compatible)

on:
  workflow_dispatch:

jobs:
  build-samba:
    runs-on: ubuntu-20.04  # 使用Ubuntu 20.04以获得Python 2支持
    timeout-minutes: 180
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python 2 and basic tools
        run: |
          echo "===== 安装Python 2和基础工具 ====="
          sudo apt update
          sudo apt install -y \
            build-essential \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf \
            wget tar xz-utils make \
            python2 \
            python2-dev \
            pkg-config \
            curl

      - name: Set Python 2 as default
        run: |
          echo "===== 设置Python 2为默认版本 ====="
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 1
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 2
          sudo update-alternatives --set python /usr/bin/python2
          python --version

      - name: Build zlib from source
        run: |
          echo "===== 编译zlib ====="
          wget https://zlib.net/zlib-1.2.13.tar.gz || \
          wget https://github.com/madler/zlib/releases/download/v1.2.13/zlib-1.2.13.tar.gz
          
          tar -xzf zlib-1.2.13.tar.gz
          cd zlib-1.2.13
          
          CC="arm-linux-gnueabihf-gcc" \
          CFLAGS="-march=armv7-a -mfpu=neon -Os" \
          ./configure --prefix=/opt/arm-deps --static
          
          make -j$(nproc)
          sudo make install
          cd ..

      - name: Build OpenSSL from source
        run: |
          echo "===== 编译OpenSSL ====="
          wget https://www.openssl.org/source/openssl-1.1.1w.tar.gz || \
          wget https://github.com/openssl/openssl/releases/download/OpenSSL_1_1_1w/openssl-1.1.1w.tar.gz
          
          tar -xzf openssl-1.1.1w.tar.gz
          cd openssl-1.1.1w
          
          export CROSS_COMPILE="arm-linux-gnueabihf-"
          export CC="${CROSS_COMPILE}gcc"
          export AR="${CROSS_COMPILE}ar"
          export CFLAGS="-march=armv7-a -mfpu=neon -Os"
          
          ./Configure linux-armv4 \
            --prefix=/opt/arm-deps \
            no-shared \
            no-dso \
            no-asm \
            ${CFLAGS}
          
          sed -i 's/^CC=.*/CC=$(CROSS_COMPILE)gcc/' Makefile
          sed -i 's/^AR=.*/AR=$(CROSS_COMPILE)ar/' Makefile
          
          make -j$(nproc)
          sudo make install
          cd ..

      - name: Download and compile Samba 4.8 with Python 2
        run: |
          echo "===== 下载和编译Samba (使用Python 2) ====="
          wget https://download.samba.org/pub/samba/stable/samba-4.8.12.tar.gz || \
          wget https://download.samba.org/pub/samba/old/4.8.12/samba-4.8.12.tar.gz
          
          tar -xzf samba-4.8.12.tar.gz
          cd samba-4.8.12

          export CC="arm-linux-gnueabihf-gcc"
          export CXX="arm-linux-gnueabihf-g++"
          export CFLAGS="-march=armv7-a -mfpu=neon -Os -I/opt/arm-deps/include"
          export LDFLAGS="-L/opt/arm-deps/lib -static -lssl -lcrypto -lz"

          # 配置Samba
          ./configure \
            --host=arm-linux-gnueabihf \
            --prefix=/usr \
            --sysconfdir=/etc/samba \
            --localstatedir=/var \
            --disable-python \
            --without-ldap \
            --without-ad-dc \
            --without-systemd \
            --without-winbind \
            --with-zlib=/opt/arm-deps \
            --enable-static \
            --disable-shared \
            --without-acl-support \
            --without-ads \
            --without-pam \
            --without-gnutls \
            ac_cv_func_fstatfs=yes

          # 编译
          make -j$(nproc) all

      - name: Alternative approach if Python 2 still fails
        if: failure()
        run: |
          echo "===== 使用更新的Samba版本 ====="
          # 下载更新的Samba版本（支持Python 3）
          wget https://download.samba.org/pub/samba/stable/samba-4.13.0.tar.gz || \
          wget https://download.samba.org/pub/samba/old/4.13.0/samba-4.13.0.tar.gz
          
          tar -xzf samba-4.13.0.tar.gz
          cd samba-4.13.0

          # 切换回Python 3
          sudo update-alternatives --set python /usr/bin/python3
          python --version

          export CC="arm-linux-gnueabihf-gcc"
          export CXX="arm-linux-gnueabihf-g++"
          export CFLAGS="-march=armv7-a -mfpu=neon -Os -I/opt/arm-deps/include"
          export LDFLAGS="-L/opt/arm-deps/lib -static -lssl -lcrypto -lz"

          ./configure \
            --host=arm-linux-gnueabihf \
            --prefix=/usr \
            --sysconfdir=/etc/samba \
            --localstatedir=/var \
            --disable-python \
            --without-ldap \
            --without-ad-dc \
            --without-systemd \
            --without-winbind \
            --with-zlib=/opt/arm-deps \
            --enable-static \
            --disable-shared \
            --without-gnutls

          make -j$(nproc) all

      - name: Verify and collect binaries
        run: |
          echo "===== 验证和收集二进制文件 ====="
          mkdir -p samba-deploy
          
          # 查找编译好的二进制文件
          if [ -f "samba-4.8.12/bin/smbd" ]; then
            cp samba-4.8.12/bin/smbd samba-4.8.12/bin/nmbd samba-4.8.12/bin/smbpasswd samba-deploy/
          elif [ -f "samba-4.13.0/bin/smbd" ]; then
            cp samba-4.13.0/bin/smbd samba-4.13.0/bin/nmbd samba-4.13.0/bin/smbpasswd samba-deploy/
          else
            echo "错误: 找不到编译好的二进制文件"
            exit 1
          fi
          
          # 验证二进制文件
          cd samba-deploy
          echo "文件信息:"
          file smbd
          file nmbd
          file smbpasswd
          
          echo "架构检查:"
          arm-linux-gnueabihf-readelf -h smbd | grep "Machine:" | grep "ARM" || exit 1

      - name: Create deployment package
        run: |
          echo "===== 创建部署包 ====="
          cd samba-deploy
          
          # 创建安装脚本
          cat > install.sh << 'EOF'
          #!/bin/sh
          echo "安装Samba for ARMv7..."
          echo "系统信息: $(uname -a)"
          
          # 安装二进制文件
          for bin in smbd nmbd smbpasswd; do
            if [ -f "/usr/sbin/$bin" ]; then
              mv "/usr/sbin/$bin" "/usr/sbin/${bin}.backup"
              echo "已备份: /usr/sbin/${bin}.backup"
            fi
            install -m 755 "$bin" "/usr/sbin/"
            echo "已安装: /usr/sbin/$bin"
          done
          
          echo "安装完成!"
          echo ""
          echo "使用方法:"
          echo "启动服务: smbd -D && nmbd -D"
          echo "添加用户: smbpasswd -a username"
          EOF
          
          chmod +x install.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: samba-armv7-binaries
          path: samba-deploy/*
          retention-days: 30

      - name: Show build success
        run: |
          echo "✅ 构建成功!"
          echo "📦 二进制文件已上传到Artifacts"
          echo "🖥️  架构: ARMv7"
          echo "🐍 Python: 兼容版本"
          echo "⏰ 时间: $(date)"
