name: Build Samba Server for ARMv5 using Docker

on:
  workflow_dispatch: # 允许手动触发工作流

env:
  SAMBA_VERSION: "4.10.18" # 使用稳定的旧版本

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Create Dockerfile for ARMv5 build
      run: |
        cat > Dockerfile << 'EOF'
        FROM arm32v5/debian:stretch

        # 设置Debian源
        RUN echo "deb http://archive.debian.org/debian stretch main" > /etc/apt/sources.list && \
            echo "deb http://archive.debian.org/debian-security stretch/updates main" >> /etc/apt/sources.list

        # 安装编译依赖
        RUN apt-get update && apt-get install -y \
            build-essential \
            wget \
            pkg-config \
            python2.7 \
            python-dev \
            libacl1-dev \
            libattr1-dev \
            libblkid-dev \
            libgnutls28-dev \
            libreadline-dev \
            curl

        # 下载和解压Samba
        WORKDIR /build
        ARG SAMBA_VERSION
        RUN wget https://download.samba.org/pub/samba/stable/samba-${SAMBA_VERSION}.tar.gz && \
            tar -xzf samba-${SAMBA_VERSION}.tar.gz && \
            rm samba-${SAMBA_VERSION}.tar.gz

        WORKDIR /build/samba-${SAMBA_VERSION}

        # 配置Samba - 使用最简单的配置
        RUN ./configure \
            --prefix=/usr \
            --disable-avahi \
            --disable-cups \
            --disable-pie \
            --disable-debug \
            --without-python \
            --without-ads \
            --without-ldap \
            --without-systemd

        # 只编译服务器组件
        RUN make -j$(nproc) bin/smbd bin/nmbd bin/smbpasswd

        # 创建输出目录
        RUN mkdir -p /output

        # 复制二进制文件
        RUN cp bin/smbd bin/nmbd bin/smbpasswd /output/

        # 检查文件信息
        RUN file /output/smbd && file /output/nmbd && file /output/smbpasswd
        EOF

    - name: Build Samba using Docker
      run: |
        # 使用buildx构建ARMv5镜像
        docker buildx build \
          --platform linux/arm/v5 \
          --build-arg SAMBA_VERSION=$SAMBA_VERSION \
          -t samba-builder .

        # 创建容器并提取二进制文件
        docker create --name samba-container samba-builder
        docker cp samba-container:/output ./samba-binaries
        docker rm samba-container

        # 检查提取的文件
        ls -la samba-binaries/
        file samba-binaries/*

    - name: Create package
      run: |
        # 创建打包目录
        mkdir -p samba-server-armv5
        
        # 复制二进制文件
        cp samba-binaries/smbd samba-binaries/nmbd samba-binaries/smbpasswd samba-server-armv5/
        
        # 检查架构
        echo "Binary architecture:"
        file samba-server-armv5/smbd
        file samba-server-armv5/nmbd
        file samba-server-armv5/smbpasswd

        # 创建压缩包
        tar -czf samba-server-armv5-$SAMBA_VERSION.tar.gz samba-server-armv5/
        
        echo "Package created: samba-server-armv5-$SAMBA_VERSION.tar.gz"
        echo "Size: $(du -h samba-server-armv5-$SAMBA_VERSION.tar.gz | cut -f1)"

    - name: Upload binary package
      uses: actions/upload-artifact@v4
      with:
        name: samba-server-armv5-binaries
        path: samba-server-armv5-$SAMBA_VERSION.tar.gz
        retention-days: 7

    - name: Show build summary
      run: |
        echo "=== Build Summary ==="
        echo "Version: $SAMBA_VERSION"
        echo "Package: samba-server-armv5-$SAMBA_VERSION.tar.gz"
        echo "Build method: Docker native ARMv5 compilation"
        if [ -f "samba-server-armv5-$SAMBA_VERSION.tar.gz" ]; then
            echo "Package size: $(du -h samba-server-armv5-$SAMBA_VERSION.tar.gz | cut -f1)"
            echo "Contents: $(tar -tzf samba-server-armv5-$SAMBA_VERSION.tar.gz)"
        else
            echo "Build failed - no package created"
            exit 1
        fi
