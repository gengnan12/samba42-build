name: Build Samba for ARMv7 (Correct Build Order)

on:
  workflow_dispatch:

jobs:
  build-samba:
    runs-on: ubuntu-22.04
    timeout-minutes: 180
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install cross-compilation tools
        run: |
          echo "===== 安装交叉编译工具 ====="
          sudo apt update
          sudo apt install -y \
            build-essential \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf \
            wget tar xz-utils make \
            pkg-config \
            curl \
            python3 \
            python3-pip

      - name: Download Samba source
        run: |
          echo "===== 下载Samba源码 ====="
          SAMBA_VERSION="4.17.0"
          wget https://download.samba.org/pub/samba/stable/samba-${SAMBA_VERSION}.tar.gz
          tar -xzf samba-${SAMBA_VERSION}.tar.gz

      - name: Configure Samba for cross-compilation
        run: |
          echo "===== 配置Samba ====="
          cd samba-4.17.0
          
          # 设置交叉编译环境
          export CC="arm-linux-gnueabihf-gcc"
          export CXX="arm-linux-gnueabihf-g++"
          export AR="arm-linux-gnueabihf-ar"
          export CFLAGS="-march=armv7-a -mfpu=neon -Os"
          export LDFLAGS="-static"
          
          # 配置Samba - 使用最小化配置
          ./configure \
            --host=arm-linux-gnueabihf \
            --target=arm-linux-gnueabihf \
            --prefix=/usr \
            --sysconfdir=/etc/samba \
            --localstatedir=/var \
            --disable-python \
            --without-ldap \
            --without-ad-dc \
            --without-systemd \
            --without-winbind \
            --disable-avahi \
            --disable-cups \
            --disable-iprint \
            --disable-glusterfs \
            --disable-json \
            --disable-libarchive \
            --nonshared-binary=smbd,nmbd,smbpasswd

      - name: Build Samba binaries
        run: |
          echo "===== 编译Samba二进制文件 ====="
          cd samba-4.17.0
          
          # 设置环境变量
          export CC="arm-linux-gnueabihf-gcc"
          export CFLAGS="-march=armv7-a -mfpu=neon -Os"
          export LDFLAGS="-static"
          
          # 使用waf直接编译特定目标
          ./buildtools/bin/waf build --targets=smbd,nmbd,bin/smbpasswd

      - name: Alternative build method
        if: failure()
        run: |
          echo "===== 使用备用编译方法 ====="
          cd samba-4.17.0
          
          # 使用make编译
          make -j$(nproc) \
            CC="arm-linux-gnueabihf-gcc" \
            CFLAGS="-march=armv7-a -mfpu=neon -Os" \
            LDFLAGS="-static" \
            smbd nmbd bin/smbpasswd

      - name: Check and collect binaries
        run: |
          echo "===== 检查和收集二进制文件 ====="
          cd samba-4.17.0
          
          # 查找二进制文件
          echo "查找smbd:"
          find . -name "smbd" -type f -executable | head -5
          echo "查找nmbd:"
          find . -name "nmbd" -type f -executable | head -5
          echo "查找smbpasswd:"
          find . -name "smbpasswd" -type f -executable | head -5
          
          # 复制二进制文件
          mkdir -p ../samba-deploy
          
          # 从bin目录复制
          if [ -f "bin/smbd" ]; then
            cp bin/smbd bin/nmbd bin/smbpasswd ../samba-deploy/ 2>/dev/null || true
          fi
          
          # 从其他可能的位置复制
          if [ ! -f "../samba-deploy/smbd" ]; then
            find . -name "smbd" -type f -executable -exec cp {} ../samba-deploy/ \; 2>/dev/null || true
            find . -name "nmbd" -type f -executable -exec cp {} ../samba-deploy/ \; 2>/dev/null || true
            find . -name "smbpasswd" -type f -executable -exec cp {} ../samba-deploy/ \; 2>/dev/null || true
          fi

      - name: Verify binaries
        run: |
          echo "===== 验证二进制文件 ====="
          cd samba-deploy
          
          if [ -f "smbd" ]; then
            echo "✅ 找到编译好的二进制文件:"
            ls -la
            echo ""
            echo "文件类型:"
            file smbd
            echo ""
            echo "架构检查:"
            arm-linux-gnueabihf-readelf -h smbd | grep "Machine:" | grep "ARM" || echo "架构检查失败"
          else
            echo "❌ 未找到编译好的二进制文件"
            # 创建说明文档
            cat > README.md << 'EOF'
            # Samba for ARMv7 编译说明
            
            自动编译过程未能成功生成二进制文件。请尝试以下方法：
            
            ## 方法一: 在目标设备上直接编译
            1. 在ARM设备上下载Samba源码:
               wget https://download.samba.org/pub/samba/stable/samba-4.17.0.tar.gz
            2. 解压源码:
               tar -xzf samba-4.17.0.tar.gz
            3. 进入源码目录:
               cd samba-4.17.0
            4. 配置和编译:
               ./configure --prefix=/usr --disable-python --without-ad-dc
               make -j$(nproc) smbd nmbd smbpasswd
            5. 安装:
               sudo make install
            
            ## 方法二: 使用包管理器
            如果系统有包管理器:
            - Debian/Ubuntu: sudo apt install samba
            - OpenWrt: opkg install samba4-server
            - CentOS/RHEL: sudo yum install samba
            
            ## 方法三: 手动交叉编译
            在x86机器上交叉编译:
            1. 安装交叉编译工具: sudo apt install gcc-arm-linux-gnueabihf
            2. 下载并解压Samba源码
            3. 配置: ./configure --host=arm-linux-gnueabihf --prefix=/usr
            4. 编译: make smbd nmbd smbpasswd
            EOF
          fi

      - name: Create installation package
        run: |
          echo "===== 创建安装包 ====="
          cd samba-deploy
          
          if [ -f "smbd" ]; then
            # 创建安装脚本
            cat > install.sh << 'EOF'
            #!/bin/sh
            echo "=== Samba for ARMv7 安装程序 ==="
            
            # 检查root权限
            if [ "$(id -u)" -ne 0 ]; then
              echo "请使用root权限运行: sudo ./install.sh"
              exit 1
            fi
            
            echo "安装二进制文件..."
            
            # 安装每个文件
            for binfile in smbd nmbd smbpasswd; do
              if [ -f "$binfile" ]; then
                # 备份原有文件
                if [ -f "/usr/sbin/$binfile" ]; then
                  backup_file="/usr/sbin/${binfile}.backup.$(date +%s)"
                  mv "/usr/sbin/$binfile" "$backup_file"
                  echo "已备份: $backup_file"
                fi
                
                # 安装新文件
                install -m 755 "$binfile" "/usr/sbin/"
                echo "已安装: /usr/sbin/$binfile"
              else
                echo "警告: 找不到文件 $binfile"
              fi
            done
            
            echo ""
            echo "=== 安装完成 ==="
            echo ""
            echo "下一步操作:"
            echo "1. 创建配置文件: /etc/samba/smb.conf"
            echo "2. 启动服务: smbd -D && nmbd -D"
            echo "3. 添加用户: smbpasswd -a username"
            EOF
            
            chmod +x install.sh
            
            # 创建配置文件示例
            cat > smb.conf.example << 'EOF'
            [global]
            workgroup = WORKGROUP
            netbios name = SAMBA_SERVER
            server string = Samba Server
            security = user
            map to guest = Bad User
            log file = /var/log/samba/log.%m
            max log size = 50

            [shared]
            comment = Shared Folder
            path = /mnt/shared
            browseable = yes
            writable = yes
            guest ok = no
            create mask = 0644
            directory mask = 0755
            EOF
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: samba-armv7-binaries
          path: samba-deploy/*
          retention-days: 30

      - name: Show final status
        run: |
          if [ -f "samba-deploy/smbd" ]; then
            echo "✅ 构建成功!"
            echo "📦 二进制文件已上传到Artifacts"
            echo "🖥️  架构: ARMv7"
            echo "📊 包含: smbd, nmbd, smbpasswd"
          else
            echo "⚠️ 构建过程遇到困难"
            echo "📋 已上传说明文档，请查看其他安装选项"
            echo "💡 建议在目标ARM设备上直接编译Samba"
          fi
          echo "⏰ 完成时间: $(date)"
