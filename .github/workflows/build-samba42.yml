name: Build Samba 4 for ARMv7 (Waf Build System)

on:
  workflow_dispatch:

jobs:
  build-samba:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install basic tools
        run: |
          echo "===== 安装基础工具 ====="
          sudo apt update
          sudo apt install -y \
            build-essential \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf \
            wget tar xz-utils make \
            pkg-config \
            curl \
            python3 \
            python3-pip \
            xsltproc \
            docbook-xsl

      - name: Download and build Samba with Waf
        run: |
          echo "===== 使用Waf构建系统编译Samba ====="
          # 下载Samba版本
          SAMBA_VERSION="4.18.0"
          wget https://download.samba.org/pub/samba/stable/samba-${SAMBA_VERSION}.tar.gz
          tar -xzf samba-${SAMBA_VERSION}.tar.gz
          cd samba-${SAMBA_VERSION}

          # 设置交叉编译环境
          export CC="arm-linux-gnueabihf-gcc"
          export CXX="arm-linux-gnueabihf-g++"
          export AR="arm-linux-gnueabihf-ar"
          export CFLAGS="-march=armv7-a -mfpu=neon -Os -ffunction-sections -fdata-sections"
          export LDFLAGS="-static -Wl,--gc-sections"

          # 使用waf configure（正确的语法）
          ./configure \
            --cross-compile \
            --cross-answers=arm.txt \
            --host=arm-linux-gnueabihf \
            --target=arm-linux-gnueabihf \
            --prefix=/usr \
            --sysconfdir=/etc/samba \
            --localstatedir=/var \
            --disable-python \
            --without-ldap \
            --without-ad-dc \
            --without-systemd \
            --without-winbind \
            --disable-avahi \
            --disable-cups \
            --disable-iprint \
            --disable-glusterfs \
            --disable-rpath \
            --disable-fault-handling \
            --nonshared-binary=smbd,nmbd,smbpasswd

          # 编译特定的二进制文件
          ./buildtools/bin/waf build --targets=smbd,nmbd,smbpasswd

          # 复制二进制文件
          mkdir -p ../samba-deploy
          cp bin/smbd bin/nmbd bin/smbpasswd ../samba-deploy/

      - name: Alternative simple build
        if: failure()
        run: |
          echo "===== 简单编译方案 ====="
          SAMBA_VERSION="4.18.0"
          cd samba-${SAMBA_VERSION}

          export CC="arm-linux-gnueabihf-gcc"
          export CFLAGS="-march=armv7-a -mfpu=neon -Os"
          export LDFLAGS="-static"

          # 直接使用make（如果可用）
          if [ -f "Makefile" ]; then
            make -j$(nproc) \
              CC="${CC}" \
              CFLAGS="${CFLAGS}" \
              LDFLAGS="${LDFLAGS}" \
              smbd nmbd smbpasswd
          else
            # 使用waf直接构建
            ./buildtools/bin/waf build --targets=smbd,nmbd,smbpasswd \
              --cross-compile \
              --host=arm-linux-gnueabihf \
              --cflags="${CFLAGS}" \
              --ldflags="${LDFLAGS}"
          fi

          mkdir -p ../samba-deploy
          cp bin/smbd bin/nmbd bin/smbpasswd ../samba-deploy/

      - name: Build minimal from source3
        if: failure()
        run: |
          echo "===== 从source3最小化编译 ====="
          # 尝试旧版本
          SAMBA_VERSION="4.8.12"
          wget https://download.samba.org/pub/samba/stable/samba-${SAMBA_VERSION}.tar.gz
          tar -xzf samba-${SAMBA_VERSION}.tar.gz
          cd samba-${SAMBA_VERSION}/source3

          export CC="arm-linux-gnueabihf-gcc"
          export CFLAGS="-march=armv7-a -mfpu=neon -Os"
          export LDFLAGS="-static"

          # 尝试autoconf方式
          if [ -f "configure" ]; then
            ./configure \
              --host=arm-linux-gnueabihf \
              --prefix=/usr \
              --enable-static-binaries
          elif [ -f "autogen.sh" ]; then
            ./autogen.sh
            ./configure \
              --host=arm-linux-gnueabihf \
              --prefix=/usr
          fi

          # 编译核心组件
          make -j$(nproc) \
            CC="${CC}" \
            CFLAGS="${CFLAGS}" \
            LDFLAGS="${LDFLAGS}" \
            smbd nmbd smbpasswd

          mkdir -p ../../samba-deploy
          cp bin/smbd bin/nmbd bin/smbpasswd ../../samba-deploy/

      - name: Verify and package binaries
        run: |
          echo "===== 验证和打包二进制文件 ====="
          mkdir -p samba-deploy
          
          # 复制二进制文件
          if [ -f "samba-4.18.0/bin/smbd" ]; then
            cp samba-4.18.0/bin/smbd samba-4.18.0/bin/nmbd samba-4.18.0/bin/smbpasswd samba-deploy/
          elif [ -f "samba-4.8.12/source3/bin/smbd" ]; then
            cp samba-4.8.12/source3/bin/smbd samba-4.8.12/source3/bin/nmbd samba-4.8.12/source3/bin/smbpasswd samba-deploy/
          else
            echo "错误: 找不到编译好的二进制文件"
            exit 1
          fi

          # 验证二进制文件
          cd samba-deploy
          echo "文件信息:"
          file smbd
          echo "架构检查:"
          arm-linux-gnueabihf-readelf -h smbd | grep "Machine:" | grep "ARM" || exit 1
          echo "链接类型:"
          arm-linux-gnueabihf-readelf -d smbd | grep "Shared library" || echo "静态链接"

      - name: Create installation package
        run: |
          echo "===== 创建安装包 ====="
          cd samba-deploy
          
          cat > install.sh << 'EOF'
          #!/bin/sh
          echo "=== Samba ARMv7 安装程序 ==="
          echo ""
          
          # 检查root权限
          if [ "$(id -u)" -ne 0 ]; then
            echo "请使用root权限运行此脚本"
            echo "sudo ./install.sh"
            exit 1
          fi
          
          echo "安装Samba二进制文件..."
          echo ""
          
          # 安装每个二进制文件
          for binfile in smbd nmbd smbpasswd; do
            if [ ! -f "$binfile" ]; then
              echo "错误: 找不到文件 $binfile"
              continue
            fi
            
            # 备份原有文件
            if [ -f "/usr/sbin/$binfile" ]; then
              backup_file="/usr/sbin/${binfile}.backup.$(date +%Y%m%d_%H%M%S)"
              mv "/usr/sbin/$binfile" "$backup_file"
              echo "已备份: $backup_file"
            fi
            
            # 安装新文件
            install -m 755 "$binfile" "/usr/sbin/"
            echo "已安装: /usr/sbin/$binfile"
          done
          
          echo ""
          echo "=== 安装完成 ==="
          echo ""
          echo "下一步:"
          echo "1. 创建配置文件: /etc/samba/smb.conf"
          echo "2. 启动服务: smbd -D && nmbd -D"
          echo "3. 添加用户: smbpasswd -a 用户名"
          echo ""
          echo "查看示例配置: cat smb.conf.example"
          EOF
          
          chmod +x install.sh
          
          # 创建配置文件示例
          cat > smb.conf.example << 'EOF'
          [global]
          workgroup = WORKGROUP
          netbios name = SAMBA_SERVER
          server string = Samba Server
          security = user
          map to guest = Bad User
          log file = /var/log/samba/log.%m
          max log size = 50
          socket options = TCP_NODELAY SO_RCVBUF=8192 SO_SNDBUF=8192

          [homes]
          comment = Home Directories
          browseable = no
          writable = yes
          valid users = %S

          [shared]
          comment = Shared Folder
          path = /mnt/shared
          browseable = yes
          writable = yes
          guest ok = no
          create mask = 0644
          directory mask = 0755
          EOF

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: samba-armv7-binaries
          path: samba-deploy/*
          retention-days: 30

      - name: Show build success
        run: |
          echo "✅ 构建成功!"
          echo "📦 二进制文件已上传到Artifacts"
          echo "🖥️  架构: ARMv7"
          echo "🔧 使用Waf构建系统"
          echo "⏰ 时间: $(date)"
