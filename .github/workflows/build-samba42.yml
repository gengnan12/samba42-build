name: Build Samba Server for ARMv5

on:
  workflow_dispatch:

env:
  SAMBA_VERSION: "4.10.18"

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Install ARM toolchain and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc-arm-linux-gnueabi \
          g++-arm-linux-gnueabi \
          binutils-arm-linux-gnueabi \
          wget \
          build-essential \
          pkg-config \
          libacl1-dev:armhf \
          libattr1-dev:armhf \
          libblkid-dev:armhf \
          libgnutls28-dev:armhf \
          libreadline-dev:armhf \
          qemu-user-static

    - name: Download Samba source
      run: |
        wget https://download.samba.org/pub/samba/stable/samba-$SAMBA_VERSION.tar.gz
        tar -xzf samba-$SAMBA_VERSION.tar.gz
        echo "SAMBA_SOURCE_DIR=samba-$SAMBA_VERSION" >> $GITHUB_ENV

    - name: Setup cross-compilation environment
      run: |
        # 创建交叉编译的sysroot
        sudo mkdir -p /usr/arm-linux-gnueabi
        sudo ln -sf /usr/arm-linux-gnueabi/include /usr/include/arm-linux-gnueabi
        sudo ln -sf /usr/arm-linux-gnueabi/lib /usr/lib/arm-linux-gnueabi

    - name: Build Samba with explicit cross-compilation
      run: |
        cd $SAMBA_SOURCE_DIR
        
        # 设置交叉编译环境变量
        export CC="arm-linux-gnueabi-gcc"
        export AR="arm-linux-gnueabi-ar"
        export RANLIB="arm-linux-gnueabi-ranlib"
        export LD="arm-linux-gnueabi-ld"
        export STRIP="arm-linux-gnueabi-strip"
        
        export CFLAGS="-Os -I/usr/include/arm-linux-gnueabi"
        export LDFLAGS="-L/usr/lib/arm-linux-gnueabi -Wl,-rpath-link,/usr/lib/arm-linux-gnueabi"
        
        export BUILD_CC="gcc"
        export BUILD_AR="ar"
        
        # 创建交叉编译答案文件来绕过检测
        cat > cross-answers.txt << 'EOF'
        Checking simple C program: yes
        Checking for large file support: yes
        Checking for -D_FILE_OFFSET_BITS=64: yes
        Checking for -D_LARGE_FILES: yes
        Checking for WORDS_BIGENDIAN: no
        Checking for C99 vsnprintf: yes
        Checking for HAVE_SECURE_MKSTEMP: yes
        Checking uname sysname type: Linux
        Checking uname machine type: armv5tel
        Checking uname release type: 4.19.0
        Checking uname version type: #1 SMP
        Checking for header stdio.h: yes
        rpath library support: yes
        Checking for _LARGEFILE64_SOURCE: yes
        Checking for _FILE_OFFSET_BITS=64: yes
        Checking getconf LFS_CFLAGS: -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
        Checking for large file support without additional flags: no
        sizeof(off_t): 8
        Checking for header vararg.h: no
        Checking for header limits.h: yes
        Checking for header assert.h: yes
        EOF
        
        # 使用交叉编译答案进行配置
        ./configure \
          --host=arm-linux-gnueabi \
          --build=x86_64-linux-gnu \
          --target=arm-linux-gnueabi \
          --cross-compile \
          --cross-answers=cross-answers.txt \
          --prefix=/usr \
          --without-python

    - name: Compile individual components
      run: |
        cd $SAMBA_SOURCE_DIR
        
        # 如果配置成功，尝试编译
        if [ -f "Makefile" ]; then
            echo "Compiling smbd..."
            make -j1 bin/smbd || echo "smbd compilation failed"
            
            echo "Compiling nmbd..."
            make -j1 bin/nmbd || echo "nmbd compilation failed"
            
            echo "Compiling smbpasswd..."
            make -j1 bin/smbpasswd || echo "smbpasswd compilation failed"
        else
            echo "Makefile not found, attempting direct compilation..."
            
            # 尝试直接编译关键文件
            find . -name "*.c" | head -5
        fi

    - name: Create package from successful builds
      run: |
        mkdir -p samba-server-armv5
        
        # 复制任何成功编译的二进制文件
        if [ -f "$SAMBA_SOURCE_DIR/bin/smbd" ]; then
            cp $SAMBA_SOURCE_DIR/bin/smbd samba-server-armv5/
            echo "✓ smbd copied"
            file samba-server-armv5/smbd
        fi
        
        if [ -f "$SAMBA_SOURCE_DIR/bin/nmbd" ]; then
            cp $SAMBA_SOURCE_DIR/bin/nmbd samba-server-armv5/
            echo "✓ nmbd copied"
            file samba-server-armv5/nmbd
        fi
        
        if [ -f "$SAMBA_SOURCE_DIR/bin/smbpasswd" ]; then
            cp $SAMBA_SOURCE_DIR/bin/smbpasswd samba-server-armv5/
            echo "✓ smbpasswd copied"
            file samba-server-armv5/smbpasswd
        fi
        
        # 如果没有编译出任何文件，创建一个空包用于调试
        if [ -z "$(ls -A samba-server-armv5)" ]; then
            echo "No binaries were built, creating empty package for debugging"
           
