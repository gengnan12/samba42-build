name: Build Samba Server for ARMv5

on:
  workflow_dispatch: # 允许手动触发工作流

env:
  SAMBA_VERSION: "4.19.3" # 使用最新的稳定版

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies and cross-toolchain
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          wget \
          pkg-config \
          python3 \
          libacl1-dev \
          libattr1-dev \
          libblkid-dev \
          libgnutls28-dev \
          libreadline-dev \
          gcc-arm-linux-gnueabi \
          g++-arm-linux-gnueabi

    - name: Download Samba source
      run: |
        wget https://download.samba.org/pub/samba/stable/samba-$SAMBA_VERSION.tar.gz
        tar -xzf samba-$SAMBA_VERSION.tar.gz
        echo "SAMBA_SOURCE_DIR=samba-$SAMBA_VERSION" >> $GITHUB_ENV

    - name: Configure Samba for ARMv5
      run: |
        cd $SAMBA_SOURCE_DIR

        # 创建交叉编译答案文件
        cat > cross-answers.txt << 'EOF'
        Checking simple C program: yes
        Checking for large file support: yes
        Checking for -D_FILE_OFFSET_BITS=64: yes
        Checking for -D_LARGE_FILES: yes
        Checking for WORDS_BIGENDIAN: no
        Checking for C99 vsnprintf: yes
        Checking for HAVE_SECURE_MKSTEMP: yes
        rpath library support: yes
        Checking for _LARGEFILE64_SOURCE: yes
        Checking for _FILE_OFFSET_BITS=64: yes
        Checking getconf LFS_CFLAGS: -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
        Checking for large file support without additional flags: no
        sizeof(off_t): 8
        Checking for header vararg.h: no
        Checking for header limits.h: yes
        Checking for header assert.h: yes
        EOF

        # 设置编译环境
        export CC="arm-linux-gnueabi-gcc"
        export AR="arm-linux-gnueabi-ar"
        export CFLAGS="-D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE -Os"
        export CPPFLAGS="-D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE"

        echo "Using CFLAGS: $CFLAGS"

        # 运行配置命令 - 使用单行格式避免多行问题
        CC="arm-linux-gnueabi-gcc" CFLAGS="$CFLAGS" CPPFLAGS="$CPPFLAGS" ./configure --prefix=/usr --host=arm-linux-gnueabi --enable-cross-answers=cross-answers.txt --disable-avahi --disable-cups --disable-pie --disable-debug --without-python --without-ads --without-ldap --without-systemd --enable-smb-server --cross-compile --cross-answers=yes

        # 如果配置失败，尝试简化配置
        if [ $? -ne 0 ]; then
            echo "Trying simplified configuration"
            make clean > /dev/null 2>&1 || true
            CC="arm-linux-gnueabi-gcc" CFLAGS="$CFLAGS" CPPFLAGS="$CPPFLAGS" ./configure --host=arm-linux-gnueabi --cross-compile --cross-answers=cross-answers.txt --disable-python --enable-smb-server
        fi

        echo "Configuration completed"

    - name: Build server components
      run: |
        cd $SAMBA_SOURCE_DIR
        echo "Building server components..."
        
        # 尝试构建核心组件
        if [ -f "Makefile" ]; then
            make -j$(nproc) bin/smbd bin/nmbd bin/smbpasswd || make -j1 bin/smbd bin/nmbd bin/smbpasswd
        else
            echo "No Makefile found"
        fi
        
        echo "Build completed"
        ls -la bin/smbd bin/nmbd bin/smbpasswd 2>/dev/null || echo "No binaries found"

    - name: Create server package
      run: |
        mkdir -p samba-server-armv5/bin
        
        # 复制二进制文件
        if [ -f "$SAMBA_SOURCE_DIR/bin/smbd" ]; then
            cp $SAMBA_SOURCE_DIR/bin/smbd samba-server-armv5/bin/
            echo "✓ smbd copied"
        fi
        
        if [ -f "$SAMBA_SOURCE_DIR/bin/nmbd" ]; then
            cp $SAMBA_SOURCE_DIR/bin/nmbd samba-server-armv5/bin/
            echo "✓ nmbd copied"
        fi
        
        if [ -f "$SAMBA_SOURCE_DIR/bin/smbpasswd" ]; then
            cp $SAMBA_SOURCE_DIR/bin/smbpasswd samba-server-armv5/bin/
            echo "✓ smbpasswd copied"
        fi
        
        # 检查文件架构
        echo "Binary architecture:"
        for bin in samba-server-armv5/bin/*; do
            if [ -f "$bin" ]; then
                echo "$(basename $bin): $(file $bin)"
            fi
        done

        
Forced large file support with:
-D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64

Usage:
./smbd -D -s smb.conf
./nmbd -D -s smb.conf
EOF

    - name: Create final archive
      run: |
        if [ -d "samba-server-armv5/bin" ] && [ -n "$(ls samba-server-armv5/bin/ 2>/dev/null)" ]; then
            tar -czf samba-server-armv5-$SAMBA_VERSION.tar.gz samba-server-armv5/
            echo "Package created successfully"
        else
            echo "No binaries found"
            exit 1
        fi

    - name: Upload server package
      uses: actions/upload-artifact@v4
      with:
        name: samba-server-armv5
        path: samba-server-armv5-$SAMBA_VERSION.tar.gz
        retention-days: 7

    - name: Show build summary
      run: |
        echo "Build Summary"
        echo "Version: $SAMBA_VERSION"
        if [ -f "samba-server-armv5-$SAMBA_VERSION.tar.gz" ]; then
            echo "Package: samba-server-armv5-$SAMBA_VERSION.tar.gz"
            echo "Size: $(du -h samba-server-armv5-$SAMBA_VERSION.tar.gz | cut -f1)"
        else
            echo "Build failed - no package created"
        fi
