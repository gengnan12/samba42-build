name: Build Samba for ARMv7 (Standard Build)

on:
  workflow_dispatch:

jobs:
  build-samba:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install cross-compilation tools
        run: |
          echo "===== 安装交叉编译工具 ====="
          sudo apt update
          sudo apt install -y \
            build-essential \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf \
            wget tar xz-utils make \
            pkg-config \
            curl \
            python3 \
            python3-pip

      - name: Download Samba source
        run: |
          echo "===== 下载Samba源码 ====="
          # 使用较新的Samba版本，但不要太新以避免兼容性问题
          SAMBA_VERSION="4.13.0"
          wget https://download.samba.org/pub/samba/stable/samba-${SAMBA_VERSION}.tar.gz
          tar -xzf samba-${SAMBA_VERSION}.tar.gz

      - name: Build with standard configure and make
        run: |
          echo "===== 使用标准构建系统编译 ====="
          cd samba-4.13.0
          
          # 设置交叉编译环境
          export CC="arm-linux-gnueabihf-gcc"
          export CXX="arm-linux-gnueabihf-g++"
          export AR="arm-linux-gnueabihf-ar"
          export CFLAGS="-march=armv7-a -mfpu=neon -Os"
          export LDFLAGS="-static"
          
          # 配置Samba
          ./configure \
            --host=arm-linux-gnueabihf \
            --target=arm-linux-gnueabihf \
            --prefix=/usr \
            --sysconfdir=/etc/samba \
            --localstatedir=/var \
            --disable-python \
            --without-ldap \
            --without-ad-dc \
            --without-systemd \
            --without-winbind \
            --disable-avahi \
            --disable-cups \
            --disable-iprint \
            --disable-glusterfs \
            --disable-json \
            --disable-libarchive \
            --with-shared-modules=!pdb_tdbsam,pdb_smbpasswd,pdb_wbc_sam,idmap_nss,nss_info_template,auth_unix,auth_wbc,auth_sam,auth_script,auth_netlogond
          
          # 编译特定的目标
          make -j$(nproc) all

      - name: Try to build only specific binaries
        if: failure()
        run: |
          echo "===== 尝试只编译特定二进制文件 ====="
          cd samba-4.13.0
          
          # 设置环境变量
          export CC="arm-linux-gnueabihf-gcc"
          export CFLAGS="-march=armv7-a -mfpu=neon -Os"
          export LDFLAGS="-static"
          
          # 尝试直接编译核心组件
          make -j$(nproc) \
            CC="${CC}" \
            CFLAGS="${CFLAGS}" \
            LDFLAGS="${LDFLAGS}" \
            smbd/smbd nmbd/nmbd client/smbpasswd

      - name: Check for compiled binaries
        run: |
          echo "===== 检查编译结果 ====="
          cd samba-4.13.0
          
          # 查找编译好的二进制文件
          find . -name "smbd" -type f -executable | head -5
          find . -name "nmbd" -type f -executable | head -5
          find . -name "smbpasswd" -type f -executable | head -5
          
          # 检查bin目录
          if [ -d "bin" ]; then
            ls -la bin/
            mkdir -p ../samba-deploy
            cp bin/smbd bin/nmbd bin/smbpasswd ../samba-deploy/ 2>/dev/null || true
          fi
          
          # 检查其他可能的位置
          if [ -f "bin/default/source3/smbd/smbd" ]; then
            mkdir -p ../samba-deploy
            cp bin/default/source3/smbd/smbd ../samba-deploy/smbd
            cp bin/default/source3/nmbd/nmbd ../samba-deploy/nmbd
            cp bin/default/source3/utils/smbpasswd ../samba-deploy/smbpasswd
          fi

      - name: Create deployment package
        run: |
          echo "===== 创建部署包 ====="
          mkdir -p samba-deploy
          
          # 如果找到了二进制文件，复制它们
          if [ -f "samba-4.13.0/bin/smbd" ]; then
            cp samba-4.13.0/bin/smbd samba-4.13.0/bin/nmbd samba-4.13.0/bin/smbpasswd samba-deploy/
          elif [ -f "samba-4.13.0/bin/default/source3/smbd/smbd" ]; then
            cp samba-4.13.0/bin/default/source3/smbd/smbd samba-deploy/smbd
            cp samba-4.13.0/bin/default/source3/nmbd/nmbd samba-deploy/nmbd
            cp samba-4.13.0/bin/default/source3/utils/smbpasswd samba-deploy/smbpasswd
          else
            echo "未找到编译好的二进制文件，创建说明文档"
            # 创建说明文档
            cat > samba-deploy/README.md << 'EOF'
            # Samba for ARMv7 编译说明
            
            自动编译过程未能成功生成二进制文件。请尝试以下方法：
            
            ## 方法一: 在目标设备上直接编译
            1. 在您的ARM设备上下载Samba源码:
               wget https://download.samba.org/pub/samba/stable/samba-4.13.0.tar.gz
            2. 解压源码:
               tar -xzf samba-4.13.0.tar.gz
            3. 进入源码目录:
               cd samba-4.13.0
            4. 配置和编译:
               ./configure --prefix=/usr --disable-python --without-ad-dc
               make -j$(nproc) smbd nmbd smbpasswd
            5. 安装:
               sudo make install
            
            ## 方法二: 使用包管理器安装
            如果您的系统有包管理器，可以尝试:
            - Debian/Ubuntu: sudo apt-get install samba
            - OpenWrt: opkg install samba4-server
            - CentOS/RHEL: sudo yum install samba
            
            ## 方法三: 寻找预编译的二进制文件
            您可以在以下位置寻找预编译的ARMv7 Samba二进制文件:
            - 您的Linux发行版仓库
            - 第三方ARM软件源
            - 开源项目如OpenWrt或Buildroot的预编译包
            EOF
          fi
          
          # 创建安装脚本
          cd samba-deploy
          if [ -f "smbd" ]; then
            cat > install.sh << 'EOF'
            #!/bin/sh
            echo "安装Samba for ARMv7..."
            
            # 检查权限
            if [ "$(id -u)" -ne 0 ]; then
              echo "请使用root权限运行此脚本: sudo ./install.sh"
              exit 1
            fi
            
            # 安装二进制文件
            for bin in smbd nmbd smbpasswd; do
              if [ -f "$bin" ]; then
                install -m 755 "$bin" "/usr/sbin/"
                echo "已安装: /usr/sbin/$bin"
              else
                echo "警告: 找不到文件 $bin"
              fi
            done
            
            echo "安装完成!"
            echo ""
            echo "使用方法:"
            echo "1. 创建配置文件: /etc/samba/smb.conf"
            echo "2. 启动服务: smbd -D && nmbd -D"
            echo "3. 添加用户: smbpasswd -a username"
            EOF
            
            chmod +x install.sh
            
            # 创建示例配置文件
            cat > smb.conf.example << 'EOF'
            [global]
            workgroup = WORKGROUP
            netbios name = SAMBA_SERVER
            server string = Samba Server
            security = user
            map to guest = Bad User
            log file = /var/log/samba/log.%m
            max log size = 50

            [homes]
            comment = Home Directories
            browseable = no
            writable = yes
            valid users = %S

            [shared]
            comment = Shared Folder
            path = /mnt/shared
            browseable = yes
            writable = yes
            guest ok = no
            create mask = 0644
            directory mask = 0755
            EOF
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: samba-armv7
          path: samba-deploy/*
          retention-days: 30

      - name: Show final message
        run: |
          echo "构建过程完成!"
          if [ -f "samba-deploy/smbd" ]; then
            echo "✅ 成功编译了Samba二进制文件"
            echo "📦 文件已上传到Artifacts"
          else
            echo "⚠️ 未能编译Samba二进制文件"
            echo "📋 已上传说明文档，请查看其他安装选项"
          fi
          echo "🖥️  目标架构: ARMv7"
          echo "⏰ 完成时间: $(date)"
