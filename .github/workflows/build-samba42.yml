name: Build Samba 4 for ARMv7 (Fix OpenSSL Compilation)

on:
  workflow_dispatch:

jobs:
  build-samba:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install basic tools
        run: |
          echo "===== 安装基础工具 ====="
          sudo apt update
          sudo apt install -y \
            build-essential \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf \
            wget tar xz-utils make \
            python3 python3-dev \
            pkg-config \
            curl

      - name: Build zlib from source
        run: |
          echo "===== 编译zlib ====="
          wget https://zlib.net/zlib-1.2.13.tar.gz || \
          wget https://github.com/madler/zlib/releases/download/v1.2.13/zlib-1.2.13.tar.gz
          
          tar -xzf zlib-1.2.13.tar.gz
          cd zlib-1.2.13
          
          # 使用交叉编译器编译zlib
          CC="arm-linux-gnueabihf-gcc" \
          CFLAGS="-march=armv7-a -mfpu=neon -Os -U_TIME_BITS -U_FILE_OFFSET_BITS" \
          ./configure --prefix=/opt/arm-deps --static
          
          make -j$(nproc)
          sudo make install
          cd ..

      - name: Build OpenSSL from source (fixed)
        run: |
          echo "===== 编译OpenSSL (修复交叉编译) ====="
          wget https://www.openssl.org/source/openssl-1.1.1w.tar.gz || \
          wget https://github.com/openssl/openssl/releases/download/OpenSSL_1_1_1w/openssl-1.1.1w.tar.gz
          
          tar -xzf openssl-1.1.1w.tar.gz
          cd openssl-1.1.1w
          
          # 设置交叉编译环境变量
          export CROSS_COMPILE="arm-linux-gnueabihf-"
          export CC="${CROSS_COMPILE}gcc"
          export AR="${CROSS_COMPILE}ar"
          export RANLIB="${CROSS_COMPILE}ranlib"
          export CFLAGS="-march=armv7-a -mfpu=neon -Os -U_TIME_BITS -U_FILE_OFFSET_BITS"
          
          # 配置OpenSSL使用交叉编译器
          ./Configure linux-armv4 \
            --prefix=/opt/arm-deps \
            no-shared \
            no-dso \
            no-asm \
            ${CFLAGS}
          
          # 修改Makefile以确保使用交叉编译器
          sed -i 's/^CC=.*/CC=$(CROSS_COMPILE)gcc/' Makefile
          sed -i 's/^AR=.*/AR=$(CROSS_COMPILE)ar/' Makefile
          sed -i 's/^RANLIB=.*/RANLIB=$(CROSS_COMPILE)ranlib/' Makefile
          
          make -j$(nproc)
          sudo make install
          cd ..

      - name: Build GnuTLS from source
        run: |
          echo "===== 编译GnuTLS ====="
          wget https://www.gnupg.org/ftp/gcrypt/gnutls/v3.6/gnutls-3.6.16.tar.xz || \
          wget https://ftp.gnu.org/gnu/gnutls/gnutls-3.6.16.tar.xz
          
          tar -xJf gnutls-3.6.16.tar.xz
          cd gnutls-3.6.16
          
          export CC="arm-linux-gnueabihf-gcc"
          export CFLAGS="-march=armv7-a -mfpu=neon -Os -U_TIME_BITS -U_FILE_OFFSET_BITS -I/opt/arm-deps/include"
          export LDFLAGS="-L/opt/arm-deps/lib -static"
          export PKG_CONFIG_PATH="/opt/arm-deps/lib/pkgconfig"
          
          ./configure \
            --host=arm-linux-gnueabihf \
            --prefix=/opt/arm-deps \
            --with-libz-prefix=/opt/arm-deps \
            --with-included-libtasn1 \
            --with-included-unistring \
            --without-p11-kit \
            --disable-doc \
            --disable-tests \
            --enable-static \
            --disable-shared \
            CFLAGS="${CFLAGS}" \
            LDFLAGS="${LDFLAGS}"
          
          make -j$(nproc)
          sudo make install
          cd ..

      - name: Download and compile Samba 4.8
        run: |
          echo "===== 下载和编译Samba ====="
          wget https://download.samba.org/pub/samba/stable/samba-4.8.12.tar.gz || \
          wget https://download.samba.org/pub/samba/old/4.8.12/samba-4.8.12.tar.gz
          
          tar -xzf samba-4.8.12.tar.gz
          cd samba-4.8.12

          export PKG_CONFIG_PATH="/opt/arm-deps/lib/pkgconfig"
          export CC="arm-linux-gnueabihf-gcc"
          export CXX="arm-linux-gnueabihf-g++"
          export CFLAGS="-march=armv7-a -mfpu=neon -Os -U_TIME_BITS -U_FILE_OFFSET_BITS -I/opt/arm-deps/include"
          export LDFLAGS="-L/opt/arm-deps/lib -static -lssl -lcrypto -lz"

          ./configure \
            --host=arm-linux-gnueabihf \
            --prefix=/usr \
            --sysconfdir=/etc/samba \
            --localstatedir=/var \
            --disable-python \
            --without-ldap \
            --without-ad-dc \
            --without-systemd \
            --without-winbind \
            --with-gnutls=/opt/arm-deps \
            --with-zlib=/opt/arm-deps \
            --enable-static \
            --disable-shared \
            --without-acl-support \
            --without-ads \
            --without-pam \
            ac_cv_func_fstatfs=yes

          make -j$(nproc) all

      - name: Verify binaries
        run: |
          echo "===== 验证二进制文件 ====="
          cd samba-4.8.12/bin
          
          echo "文件类型:"
          file smbd
          file nmbd
          
          echo "架构检查:"
          arm-linux-gnueabihf-readelf -h smbd | grep "Machine:" | grep "ARM" || exit 1
          
          echo "链接检查:"
          if arm-linux-gnueabihf-readelf -d smbd | grep -q "Shared library"; then
            echo "警告: 二进制文件有动态库依赖"
            arm-linux-gnueabihf-readelf -d smbd | grep "Shared library"
          else
            echo "✓ 二进制文件是静态链接的"
          fi

      - name: Create deployment package
        run: |
          echo "===== 创建部署包 ====="
          mkdir -p samba-deploy
          cd samba-4.8.12/bin
          
          cp smbd nmbd smbpasswd ../../samba-deploy/
          
          # 创建安装脚本
          cat > ../../samba-deploy/install.sh << 'EOF'
          #!/bin/sh
          echo "安装Samba二进制文件..."
          echo "目标架构: ARMv7"
          
          # 检查架构是否匹配
          if [ "$(uname -m)" != "armv7l" ]; then
            echo "警告: 当前系统架构是 $(uname -m)，但二进制文件是为ARMv7编译的"
          fi
          
          # 安装文件
          for bin in smbd nmbd smbpasswd; do
            if [ -f "/usr/sbin/$bin" ]; then
              mv "/usr/sbin/$bin" "/usr/sbin/${bin}.backup"
              echo "已备份: /usr/sbin/${bin}.backup"
            fi
            cp "$bin" "/usr/sbin/"
            chmod 755 "/usr/sbin/$bin"
            echo "已安装: /usr/sbin/$bin"
          done
          
          echo "安装完成!"
          echo ""
          echo "使用方法:"
          echo "启动文件共享: smbd -D"
          echo "启动名称服务: nmbd -D"
          echo "添加用户: smbpasswd -a 用户名"
          EOF
          
          chmod +x ../../samba-deploy/install.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: samba4.8-armv7
          path: samba-deploy/*
          retention-days: 30

      - name: Show build success
        run: |
          echo "✅ 构建成功!"
          echo "📦 二进制文件已上传到Artifacts"
          echo "🖥️  架构: ARMv7"
          echo "🔧 修复: OpenSSL交叉编译问题"
          echo "📅 构建时间: $(date)"
