name: Build Samba 4 for ARMv7 (Ubuntu Latest - Fixed)

on:
  workflow_dispatch:

jobs:
  build-samba:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup multiarch environment
        run: |
          echo "===== 设置多架构环境 ====="
          # 添加ARM架构支持
          sudo dpkg --add-architecture armhf
          
          # 更新软件源
          sudo apt update -y
          
          # 安装基础工具
          sudo apt install -y \
            build-essential \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf \
            pkg-config \
            wget tar xz-utils make \
            python3 python3-dev \
            cmake

      - name: Build dependencies from source
        run: |
          echo "===== 从源码编译依赖库 ====="
          
          # 编译zlib
          echo "编译zlib..."
          wget https://zlib.net/zlib-1.2.13.tar.gz
          tar -xzf zlib-1.2.13.tar.gz
          cd zlib-1.2.13
          CC=arm-linux-gnueabihf-gcc ./configure --prefix=/opt/arm-deps
          make -j$(nproc)
          sudo make install
          cd ..
          
          # 编译OpenSSL
          echo "编译OpenSSL..."
          wget https://www.openssl.org/source/openssl-1.1.1w.tar.gz
          tar -xzf openssl-1.1.1w.tar.gz
          cd openssl-1.1.1w
          ./Configure linux-armv4 -march=armv7-a -mfpu=neon -mfloat-abi=hard --prefix=/opt/arm-deps no-shared
          make -j$(nproc)
          sudo make install
          cd ..
          
          # 编译GnuTLS
          echo "编译GnuTLS..."
          wget https://www.gnupg.org/ftp/gcrypt/gnutls/v3.7/gnutls-3.7.0.tar.xz
          tar -xJf gnutls-3.7.0.tar.xz
          cd gnutls-3.7.0
          ./configure \
            --host=arm-linux-gnueabihf \
            --prefix=/opt/arm-deps \
            --with-libz-prefix=/opt/arm-deps \
            --with-included-libtasn1 \
            --with-included-unistring \
            --without-p11-kit \
            --disable-doc \
            --disable-tests \
            CFLAGS="-march=armv7-a -mfpu=neon -mfloat-abi=hard -Os -I/opt/arm-deps/include" \
            LDFLAGS="-L/opt/arm-deps/lib -static-libgcc"
          make -j$(nproc)
          sudo make install
          cd ..

      - name: Download Samba 4.9
        run: |
          echo "===== 下载Samba 4.9 ====="
          SAMBA_VERSION="4.9.5"
          wget -q --show-progress "https://download.samba.org/pub/samba/stable/samba-${SAMBA_VERSION}.tar.gz"
          tar -xzf samba-${SAMBA_VERSION}.tar.gz

      - name: Configure Samba
        run: |
          echo "===== 配置Samba ====="
          SAMBA_VERSION="4.9.5"
          cd samba-${SAMBA_VERSION}

          export PKG_CONFIG_PATH="/opt/arm-deps/lib/pkgconfig"
          export CC="arm-linux-gnueabihf-gcc"
          export CXX="arm-linux-gnueabihf-g++"
          export CFLAGS="-march=armv7-a -mfpu=neon -mfloat-abi=hard -Os -I/opt/arm-deps/include"
          export LDFLAGS="-L/opt/arm-deps/lib -static-libgcc -static-libstdc++ -lz"

          ./configure \
            --host=arm-linux-gnueabihf \
            --prefix=/usr \
            --sysconfdir=/etc/samba \
            --localstatedir=/var \
            --disable-python \
            --without-ldap \
            --without-ad-dc \
            --without-systemd \
            --without-winbind \
            --with-gnutls=/opt/arm-deps \
            --with-zlib=/opt/arm-deps \
            --enable-static \
            --disable-shared \
            --without-acl-support \
            --without-ads \
            --without-ldap \
            --without-pam \
            ac_cv_func_fstatfs=yes

      - name: Compile Samba
        run: |
          echo "===== 编译Samba ====="
          SAMBA_VERSION="4.9.5"
          cd samba-${SAMBA_VERSION}
          make -j$(nproc) all

      - name: Check binary compatibility
        run: |
          echo "===== 检查二进制兼容性 ====="
          SAMBA_VERSION="4.9.5"
          cd samba-${SAMBA_VERSION}/bin
          
          # 检查文件类型
          echo "文件类型:"
          file smbd
          file nmbd
          
          # 检查架构
          echo "架构信息:"
          arm-linux-gnueabihf-readelf -h smbd | grep "Machine:" | grep "ARM" || exit 1
          
          # 检查是否为静态链接
          echo "链接类型:"
          arm-linux-gnueabihf-readelf -d smbd | grep "Shared library" && echo "动态链接" || echo "静态链接"

      - name: Create static binary package
        run: |
          echo "===== 创建静态二进制包 ====="
          SAMBA_VERSION="4.9.5"
          mkdir -p samba-static-armv7
          cd samba-${SAMBA_VERSION}/bin
          
          # 复制主要二进制文件
          cp smbd nmbd smbpasswd ../../samba-static-armv7/
          
          # 创建安装脚本
          cat > ../../samba-static-armv7/install.sh << 'EOF'
          #!/bin/sh
          echo "安装Samba静态二进制文件..."
          echo "复制文件到系统目录..."
          cp smbd nmbd smbpasswd /usr/sbin/
          chmod 755 /usr/sbin/smbd /usr/sbin/nmbd /usr/sbin/smbpasswd
          echo "安装完成!"
          echo ""
          echo "使用方法:"
          echo "启动smbd: smbd -D"
          echo "启动nmbd: nmbd -D"
          echo "添加用户: smbpasswd -a username"
          EOF
          
          chmod +x ../../samba-static-armv7/install.sh
          
          # 创建配置文件示例
          cat > ../../samba-static-armv7/smb.conf.example << 'EOF'
          [global]
          workgroup = WORKGROUP
          server string = Samba Server
          security = user
          map to guest = Bad User

          [share]
          comment = Shared Folder
          path = /mnt/share
          browseable = yes
          writable = yes
          guest ok = no
          EOF

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: samba4.9-armv7-static
          path: samba-static-armv7/*
          retention-days: 30

      - name: Show build summary
        run: |
          echo "===== 构建总结 ====="
          echo "系统: Ubuntu Latest"
          echo "目标架构: ARMv7"
          echo "Samba版本: 4.9.5"
          echo "链接方式: 静态链接"
          echo "包含组件: smbd, nmbd, smbpasswd"
          echo "构建时间: $(date)"
          echo "适用于: Linux 4.1.x (Buildroot 2017)"
