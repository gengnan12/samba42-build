name: Build Samba for ARMv7 (Fixed Toolchain)

on:
  workflow_dispatch:

jobs:
  build-samba:
    runs-on: ubuntu-22.04
    timeout-minutes: 180
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install complete cross-compilation toolchain
        run: |
          echo "===== 安装完整的交叉编译工具链 ====="
          sudo apt update
          sudo apt install -y \
            build-essential \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf \
            binutils-arm-linux-gnueabihf \
            libc6-dev-armhf-cross \
            libstdc++-dev-armhf-cross \
            wget tar xz-utils make \
            pkg-config \
            curl \
            python3

      - name: Test cross-compilation toolchain
        run: |
          echo "===== 测试交叉编译工具链 ====="
          # 创建一个简单的测试程序
          cat > test.c << 'EOF'
          #include <stdio.h>
          int main() {
              printf("Hello ARM!\n");
              return 0;
          }
          EOF
          
          # 尝试交叉编译
          arm-linux-gnueabihf-gcc test.c -o test-arm -static
          
          # 检查是否编译成功
          if [ -f "test-arm" ]; then
            echo "✅ 交叉编译工具链工作正常"
            file test-arm
          else
            echo "❌ 交叉编译工具链有问题"
            echo "尝试修复工具链..."
          fi

      - name: Fix toolchain issues
        run: |
          echo "===== 修复工具链问题 ====="
          # 安装多架构支持
          sudo dpkg --add-architecture armhf
          sudo apt update
          sudo apt install -y \
            libc6:armhf \
            libc6-dev:armhf \
            libstdc++6:armhf

      - name: Download Samba source
        run: |
          echo "===== 下载Samba源码 ====="
          # 使用更旧的稳定版本
          SAMBA_VERSION="4.12.0"
          wget https://download.samba.org/pub/samba/stable/samba-${SAMBA_VERSION}.tar.gz
          tar -xzf samba-${SAMBA_VERSION}.tar.gz

      - name: Create proper cross-compilation environment
        run: |
          echo "===== 创建正确的交叉编译环境 ====="
          cd samba-4.12.0
          
          # 创建完整的交叉编译答案文件
          cat > cross-answers.txt << 'EOF'
          Checking uname sysname type: "Linux"
          Checking uname machine type: "armv7l"
          Checking uname release type: "4.1.52"
          Checking uname version type: "#1 SMP PREEMPT Sat Sep 18 17:36:44 CST 2021"
          Checking simple C program: yes
          Checking for large file support: yes
          Checking for -D_FILE_OFFSET_BITS=64: yes
          Checking for -D_LARGEFILE64_SOURCE=1: yes
          Checking for -D_LARGE_FILES: yes
          Checking for C99 vsnprintf: yes
          Checking for HAVE_FAST_64BIT_OFFSETS: yes
          Checking for HAVE_SECURE_MKSTEMP: yes
          Checking for HAVE_IFACE_GETIFADDRS: yes
          Checking for HAVE_IFACE_IFCONF: yes
          Checking for HAVE_IFACE_IFREQ: yes
          Checking for HAVE_MMAP: yes
          Checking for HAVE_FCNTL_LOCK: yes
          Checking for HAVE_KRB5: no
          Checking for HAVE_ADS: no
          EOF

      - name: Configure Samba with explicit toolchain
        run: |
          echo "===== 配置Samba (明确指定工具链) ====="
          cd samba-4.12.0
          
          # 设置完整的交叉编译环境
          export CC="arm-linux-gnueabihf-gcc"
          export CXX="arm-linux-gnueabihf-g++"
          export AR="arm-linux-gnueabihf-ar"
          export RANLIB="arm-linux-gnueabihf-ranlib"
          export STRIP="arm-linux-gnueabihf-strip"
          export CFLAGS="-march=armv7-a -mfpu=neon -mfloat-abi=hard -Os -static"
          export LDFLAGS="-static -Wl,--gc-sections"
          export PKG_CONFIG_PATH=""
          export PKG_CONFIG_LIBDIR=""
          
          # 使用明确的交叉编译配置
          ./configure \
            --cross-compile \
            --cross-answers=cross-answers.txt \
            --host=arm-linux-gnueabihf \
            --target=arm-linux-gnueabihf \
            --build=x86_64-linux-gnu \
            --prefix=/usr \
            --disable-python \
            --without-ad-dc \
            --without-ldap \
            --without-ads \
            --without-acl-support \
            --without-pam \
            --disable-avahi \
            --disable-cups \
            --disable-iprint \
            --disable-glusterfs \
            --enable-static \
            --disable-shared

      - name: Build Samba with explicit flags
        run: |
          echo "===== 编译Samba ====="
          cd samba-4.12.0
          
          export CC="arm-linux-gnueabihf-gcc"
          export CFLAGS="-march=armv7-a -mfpu=neon -mfloat-abi=hard -Os -static"
          export LDFLAGS="-static"
          
          # 编译核心组件
          make -j$(nproc) CC="${CC}" CFLAGS="${CFLAGS}" LDFLAGS="${LDFLAGS}" smbd nmbd smbpasswd

      - name: Check and collect binaries
        run: |
          echo "===== 检查和收集二进制文件 ====="
          cd samba-4.12.0
          
          mkdir -p ../samba-deploy
          
          # 查找二进制文件
          if [ -f "bin/smbd" ]; then
            cp bin/smbd bin/nmbd bin/smbpasswd ../samba-deploy/
          elif [ -f "source3/bin/smbd" ]; then
            cp source3/bin/smbd source3/bin/nmbd source3/bin/smbpasswd ../samba-deploy/
          else
            find . -name "smbd" -type f -executable -exec cp {} ../samba-deploy/ \; 2>/dev/null || true
            find . -name "nmbd" -type f -executable -exec cp {} ../samba-deploy/ \; 2>/dev/null || true
            find . -name "smbpasswd" -type f -executable -exec cp {} ../samba-deploy/ \; 2>/dev/null || true
          fi

      - name: Create final package
        run: |
          echo "===== 创建最终包 ====="
          mkdir -p samba-deploy
          cd samba-deploy
          
          if [ -f "smbd" ]; then
            echo "✅ 创建安装脚本"
            
            cat > install.sh << 'EOF'
            #!/bin/sh
            echo "=== Samba for ARMv7 安装程序 ==="
            
            if [ "$(id -u)" -ne 0 ]; then
              echo "请使用: sudo ./install.sh"
              exit 1
            fi
            
            echo "安装Samba二进制文件..."
            
            for bin in smbd nmbd smbpasswd; do
              if [ -f "$bin" ]; then
                install -m 755 "$bin" "/usr/sbin/"
                echo "已安装: /usr/sbin/$bin"
              fi
            done
            
            echo "安装完成!"
            EOF
            
            chmod +x install.sh
            
            cat > smb.conf.example << 'EOF'
            [global]
            workgroup = WORKGROUP
            security = user
            map to guest = Bad User
            
            [shared]
            path = /mnt/shared
            browseable = yes
            writable = yes
            guest ok = no
            EOF
            
          else
            echo "❌ 编译失败，创建详细指南"
            
            cat > COMPILE_GUIDE.md << 'EOF'
            # Samba for ARMv7 编译指南
            
            ## 问题分析
            交叉编译工具链配置失败。
            
            ## 解决方案
            
            ### 方案一: 在目标设备上直接编译
            ```bash
            # 在ARM设备上执行
            wget https://download.samba.org/pub/samba/stable/samba-4.12.0.tar.gz
            tar -xzf samba-4.12.0.tar.gz
            cd samba-4.12.0
            ./configure --prefix=/usr --disable-python
            make -j$(nproc) smbd nmbd smbpasswd
            sudo make install
            ```
            
            ### 方案二: 使用预编译包
            ```bash
            # Debian/Ubuntu
            sudo apt install samba
            
            # OpenWrt
            opkg install samba4-server
            
            # 从第三方源获取预编译的ARMv7二进制文件
            ```
            
            ### 方案三: 手动设置交叉编译
            确保安装完整的工具链:
            ```bash
            sudo apt install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf \
                 binutils-arm-linux-gnueabihf libc6-dev-armhf-cross
            ```
            EOF
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: samba-armv7
          path: samba-deploy/*
          retention-days: 30

      - name: Final message
        run: |
          if [ -f "samba-deploy/smbd" ]; then
            echo "🎉 成功编译Samba for ARMv7!"
            echo "📦 二进制文件已上传到Artifacts"
          else
            echo "⚠️ 交叉编译失败"
            echo "💡 建议在目标ARM设备上直接编译Samba"
            echo "📋 已上传详细的编译指南"
          fi
