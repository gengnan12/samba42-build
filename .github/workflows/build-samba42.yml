name: Build Samba 4 for ARMv7 (Fixed Build System)

on:
  workflow_dispatch:

jobs:
  build-samba:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install basic tools
        run: |
          echo "===== 安装基础工具 ====="
          sudo apt update
          sudo apt install -y \
            build-essential \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf \
            wget tar xz-utils make \
            pkg-config \
            curl \
            python3 \
            python3-pip

      - name: Install Python dependencies for newer Samba
        run: |
          echo "===== 安装Python依赖 ====="
          pip3 install --user setuptools

      - name: Build Samba 4.18+ (modern build system)
        run: |
          echo "===== 编译现代版Samba (4.18+) ====="
          # 下载较新的Samba版本，支持现代构建系统
          SAMBA_VERSION="4.18.0"
          wget https://download.samba.org/pub/samba/stable/samba-${SAMBA_VERSION}.tar.gz
          tar -xzf samba-${SAMBA_VERSION}.tar.gz
          cd samba-${SAMBA_VERSION}

          # 设置交叉编译环境
          export CC="arm-linux-gnueabihf-gcc"
          export CXX="arm-linux-gnueabihf-g++"
          export AR="arm-linux-gnueabihf-ar"
          export CFLAGS="-march=armv7-a -mfpu=neon -Os"
          export LDFLAGS="-static"

          # 使用bootstrap和configure
          ./configure \
            --host=arm-linux-gnueabihf \
            --target=arm-linux-gnueabihf \
            --prefix=/usr \
            --sysconfdir=/etc/samba \
            --localstatedir=/var \
            --disable-python \
            --without-ldap \
            --without-ad-dc \
            --without-systemd \
            --without-winbind \
            --enable-static \
            --disable-shared \
            --without-gnutls \
            --with-builtin-libraries=md5,des,sha256,sha512,arc4

          # 只编译核心组件
          make -j$(nproc) all

          # 复制二进制文件
          mkdir -p ../samba-deploy
          cp bin/smbd bin/nmbd bin/smbpasswd ../samba-deploy/

      - name: Alternative minimal build
        if: failure()
        run: |
          echo "===== 最小化编译方案 ====="
          # 如果标准构建失败，尝试最小化构建
          SAMBA_VERSION="4.18.0"
          cd samba-${SAMBA_VERSION}

          export CC="arm-linux-gnueabihf-gcc"
          export CFLAGS="-march=armv7-a -mfpu=neon -Os"
          export LDFLAGS="-static"

          # 直接使用make编译特定目标
          make -j$(nproc) \
            CC="${CC}" \
            CFLAGS="${CFLAGS}" \
            LDFLAGS="${LDFLAGS}" \
            smbd nmbd smbpasswd

          mkdir -p ../samba-deploy
          cp bin/smbd bin/nmbd bin/smbpasswd ../samba-deploy/

      - name: Build from source3 directory (old style)
        if: failure()
        run: |
          echo "===== 传统方式编译 ====="
          # 尝试使用source3目录的传统构建方式
          SAMBA_VERSION="4.8.12"
          wget https://download.samba.org/pub/samba/stable/samba-${SAMBA_VERSION}.tar.gz
          tar -xzf samba-${SAMBA_VERSION}.tar.gz
          cd samba-${SAMBA_VERSION}

          # 进入source3目录
          cd source3

          export CC="arm-linux-gnueabihf-gcc"
          export CFLAGS="-march=armv7-a -mfpu=neon -Os"
          export LDFLAGS="-static"

          # 如果存在autogen.sh，先运行它
          if [ -f "autogen.sh" ]; then
            ./autogen.sh
          fi

          # 如果存在configure脚本，使用它
          if [ -f "configure" ]; then
            ./configure \
              --host=arm-linux-gnueabihf \
              --prefix=/usr \
              --enable-static \
              --disable-shared
          fi

          # 编译核心组件
          make -j$(nproc) \
            CC="${CC}" \
            CFLAGS="${CFLAGS}" \
            LDFLAGS="${LDFLAGS}" \
            smbd nmbd smbpasswd

          mkdir -p ../../samba-deploy
          cp bin/smbd bin/nmbd bin/smbpasswd ../../samba-deploy/

      - name: Verify binaries
        run: |
          echo "===== 验证二进制文件 ====="
          mkdir -p samba-deploy
          
          # 检查并复制二进制文件
          if [ -f "samba-4.18.0/bin/smbd" ]; then
            cp samba-4.18.0/bin/smbd samba-4.18.0/bin/nmbd samba-4.18.0/bin/smbpasswd samba-deploy/
          elif [ -f "samba-4.8.12/source3/bin/smbd" ]; then
            cp samba-4.8.12/source3/bin/smbd samba-4.8.12/source3/bin/nmbd samba-4.8.12/source3/bin/smbpasswd samba-deploy/
          else
            echo "错误: 找不到编译好的二进制文件"
            exit 1
          fi

          cd samba-deploy
          echo "文件信息:"
          file smbd
          echo "架构检查:"
          arm-linux-gnueabihf-readelf -h smbd | grep "Machine:" | grep "ARM" || exit 1

      - name: Create installation package
        run: |
          echo "===== 创建安装包 ====="
          cd samba-deploy
          
          cat > install.sh << 'EOF'
          #!/bin/sh
          echo "=== Samba for ARMv7 安装程序 ==="
          echo "系统信息: $(uname -a)"
          
          # 检查架构
          if [ "$(uname -m)" != "armv7l" ]; then
            echo "警告: 当前架构是 $(uname -m)，但二进制文件是为ARMv7编译的"
            read -p "是否继续安装? (y/N) " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
              exit 1
            fi
          fi
          
          # 安装二进制文件
          for bin in smbd nmbd smbpasswd; do
            if [ -f "$bin" ]; then
              if [ -f "/usr/sbin/$bin" ]; then
                mv "/usr/sbin/$bin" "/usr/sbin/${bin}.backup"
                echo "已备份原文件: /usr/sbin/${bin}.backup"
              fi
              install -m 755 "$bin" "/usr/sbin/"
              echo "已安装: /usr/sbin/$bin"
            else
              echo "错误: 找不到文件 $bin"
            fi
          done
          
          echo ""
          echo "=== 安装完成 ==="
          echo ""
          echo "使用方法:"
          echo "1. 启动文件共享服务: smbd -D"
          echo "2. 启动名称解析服务: nmbd -D"
          echo "3. 添加用户: smbpasswd -a 用户名"
          echo ""
          echo "需要先创建配置文件 /etc/samba/smb.conf"
          EOF
          
          chmod +x install.sh
          
          # 创建简单的配置文件示例
          cat > smb.conf.example << 'EOF'
          [global]
          workgroup = WORKGROUP
          server string = Samba Server
          security = user
          map to guest = Bad User
          log file = /var/log/samba/log.%m
          max log size = 50

          [shared]
          comment = Shared Folder
          path = /mnt/shared
          browseable = yes
          writable = yes
          valid users = @smbusers
          create mask = 0664
          directory mask = 0775
          EOF

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: samba-armv7-binaries
          path: samba-deploy/*
          retention-days: 30

      - name: Show build success
        run: |
          echo "✅ 构建成功!"
          echo "📦 二进制文件已上传到Artifacts"
          echo "🖥️  架构: ARMv7"
          echo "🔧 使用现代构建系统"
          echo "⏰ 时间: $(date)"
