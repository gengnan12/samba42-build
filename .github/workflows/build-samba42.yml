name: Build Samba for ARMv5

on:
  workflow_dispatch: # 允许手动触发工作流
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  SAMBA_VERSION: "4.19.3" # 建议使用最新的稳定版，请从 samba.org 获取

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies and cross-toolchain
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          wget \
          pkg-config \
          python3 \
          python3-markdown \
          python3-dnspython \
          libacl1-dev \
          libattr1-dev \
          libblkid-dev \
          libgnutls28-dev \
          libreadline-dev \
          gcc-arm-linux-gnueabi \
          g++-arm-linux-gnueabi

    - name: Download Samba source
      run: |
        wget https://download.samba.org/pub/samba/stable/samba-$SAMBA_VERSION.tar.gz
        tar -xzf samba-$SAMBA_VERSION.tar.gz
        echo "SAMBA_SOURCE_DIR=samba-$SAMBA_VERSION" >> $GITHUB_ENV

    - name: Configure Samba for ARMv5
      run: |
        cd $SAMBA_SOURCE_DIR

        # 创建交叉编译答案文件
        cat > cross-answers.txt << 'EOF'
        Checking simple C program: yes
        Checking for large file support: yes
        Checking for -D_FILE_OFFSET_BITS=64: yes
        Checking for WORDS_BIGENDIAN: no
        Checking for C99 vsnprintf: yes
        Checking for HAVE_SECURE_MKSTEMP: yes
        rpath library support: yes
        Checking for _LARGEFILE64_SOURCE: yes
        Checking for CC support of -D_FORTIFY_SOURCE=2: yes
        Checking for _FILE_OFFSET_BITS=64: yes
        Checking for working strptime: yes
        Checking for SHPROCESSOR_PPC: no
        Checking for getauthuid: no
        EOF

        # 设置交叉编译环境和答案文件路径
        export cross_answers=$(pwd)/cross-answers.txt
        export CC="arm-linux-gnueabi-gcc"
        export AR="arm-linux-gnueabi-ar"
        export RANLIB="arm-linux-gnueabi-ranlib"
        export CFLAGS="-Os -static-libgcc"  # 添加静态链接和一些优化标志

        # 运行 configure 命令 - 移除了无效的 --disable-pie 选项
        ./configure \
          --prefix=/usr \
          --host=arm-linux-gnueabi \
          --disable-avahi \
          --disable-cups \
          --without-ad-dc \
          --without-ldap \
          --without-ads \
          --without-systemd \
          --without-json \
          --without-libarchive \
          --with-shared-modules=!vfs_snapper \
          --cross-compile \
          --cross-answers=cross-answers.txt \
          --disable-python

        # 显示配置摘要
        echo "=== Configuration Summary ==="
        grep "^.*=" bin/config.status | head -20

    - name: Build Samba (This will take a while...)
      run: |
        cd $SAMBA_SOURCE_DIR
        make -j$(nproc) # 使用所有可用的CPU核心进行编译

        # 检查生成的关键二进制文件
        echo "=== Built binaries ==="
        file bin/smbd || true
        file bin/nmbd || true
        file bin/smbclient || true

    - name: Install to staging directory
      run: |
        cd $SAMBA_SOURCE_DIR
        mkdir -p ../staging
        make install DESTDIR=$(pwd)/../staging

    - name: Package the binaries
      run: |
        mkdir -p samba-armv5-binaries
        
        # 复制关键文件
        cp -r $SAMBA_SOURCE_DIR/../staging/usr/* samba-armv5-binaries/
        
        # 检查文件架构
        echo "=== Checking binary architectures ==="
        find samba-armv5-binaries -type f -executable -exec sh -c 'file "$1" | grep -E "ELF|ARM"' sh {} \;
        
        # 创建构建信息
        echo "Samba $SAMBA_VERSION built for ARMv5 on $(date)" > samba-armv5-binaries/BUILD_INFO.txt
        echo "Toolchain: gcc-arm-linux-gnueabi" >> samba-armv5-binaries/BUILD_INFO.txt
        echo "Build system: GitHub Actions Ubuntu 22.04" >> samba-armv5-binaries/BUILD_INFO.txt
        echo "Configure options: --host=arm-linux-gnueabi --cross-compile" >> samba-armv5-binaries/BUILD_INFO.txt
        
        # 创建简单的部署说明
        cat > samba-armv5-binaries/README.txt << 'EOF'
        Samba ARMv5 Binary Distribution
        
        1. Copy the bin/, sbin/, lib/ directories to your ARMv5 device
        2. Ensure the device has required libraries (libacl, libattr, libgnutls, etc.)
        3. Alternatively, use static linking by adding CFLAGS="-static" in build
        
        Key binaries:
        - bin/smbd: SMB daemon
        - bin/nmbd: NetBIOS name server
        - bin/smbclient: SMB client
        - bin/smbpasswd: Password utility
        
        Note: You may need to set LD_LIBRARY_PATH if libraries are in non-standard locations
        EOF

    - name: Create minimal distribution package
      run: |
        # 创建只包含关键二进制文件的精简包
        mkdir -p samba-minimal/bin
        mkdir -p samba-minimal/sbin
        
        # 复制最重要的二进制文件
        cp $SAMBA_SOURCE_DIR/bin/smbd samba-minimal/bin/ || true
        cp $SAMBA_SOURCE_DIR/bin/nmbd samba-minimal/bin/ || true
        cp $SAMBA_SOURCE_DIR/bin/smbclient samba-minimal/bin/ || true
        cp $SAMBA_SOURCE_DIR/bin/smbpasswd samba-minimal/bin/ || true
        cp $SAMBA_SOURCE_DIR/bin/testparm samba-minimal/bin/ || true
        
        # 创建打包文件
        tar -czf samba-armv5-minimal-$SAMBA_VERSION.tar.gz samba-minimal/
        tar -czf samba-armv5-full-$SAMBA_VERSION.tar.gz samba-armv5-binaries/

    - name: Upload binaries as artifact
      uses: actions/upload-artifact@v4
      with:
        name: samba-armv5-$SAMBA_VERSION
        path: |
          samba-armv5-minimal-$SAMBA_VERSION.tar.gz
          samba-armv5-full-$SAMBA_VERSION.tar.gz
        retention-days: 7

    - name: Show build summary
      run: |
        echo "=== Samba ARMv5 Build Complete ==="
        echo "Version: $SAMBA_VERSION"
        echo "Minimal package: samba-armv5-minimal-$SAMBA_VERSION.tar.gz"
        echo "Full package: samba-armv5-full-$SAMBA_VERSION.tar.gz"
        echo "Artifacts will be available for download from the Actions tab"
